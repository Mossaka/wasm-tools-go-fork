package foo:bar;

interface foo {
    resource a {} // TODO: constructor, methods, and static functions;
    resource b {} // TODO: constructor, methods, and static functions;
    resource c {} // TODO: constructor, methods, and static functions;
    resource d {} // TODO: constructor, methods, and static functions;
    resource e {} // TODO: constructor, methods, and static functions;
    [constructor]b: func() -> own<b>;
    [constructor]c: func(x: u32) -> own<c>;
    [constructor]d: func(x: u32) -> own<d>;
    [constructor]e: func(other: own<e>, other2: borrow<e>) -> own<e>;
    [method]d.a: func(self: borrow<d>);
    [method]e.method: func(self: borrow<e>, thing: own<e>, thing2: borrow<e>);
    [static]d.b: func();
}

interface i {
    resource a {} // TODO: constructor, methods, and static functions;
    type t1 = a;
    type t2 = borrow<a>;
    type t3 = borrow<t1>;
}

world w {
    import [constructor]c: func() -> own<c>;
    resource a {} // TODO: constructor, methods, and static functions;
    resource b {} // TODO: constructor, methods, and static functions;
    resource c {} // TODO: constructor, methods, and static functions;
}
