&wit.Resolve{
  Worlds:     []*wit.World(nil),
  Interfaces: []*wit.Interface{
    &wit.Interface{
      Name:     &"bar",
      TypeDefs: map[string]*wit.TypeDef{
        "the-type": &wit.TypeDef{
          Name:  &"the-type",
          Kind:  wit.U32{},
          Owner: &wit.Interface{...},
          Docs:  wit.Docs{
            Contents: "",
          },
        },
      },
      Functions: map[string]*wit.Function{},
      Package:   &wit.Package{
        Name: wit.PackageName{
          Namespace: "foo",
          Name:      "foo",
          Version:   (*semver.Version)(nil),
        },
        Interfaces: map[string]*wit.Interface{
          "bar": &wit.Interface{...},
          "baz": &wit.Interface{
            Name:     &"baz",
            TypeDefs: map[string]*wit.TypeDef{
              "test": &wit.TypeDef{
                Name:  &"test",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "the-type": &wit.TypeDef{
                Name: &"the-type",
                Kind: &wit.TypeDef{
                  Name:  &"the-type",
                  Kind:  &wit.TypeDef{...},
                  Owner: &wit.Interface{
                    Name:     &"foo",
                    TypeDefs: map[string]*wit.TypeDef{
                      "the-type": &wit.TypeDef{...},
                    },
                    Functions: map[string]*wit.Function{},
                    Package:   &wit.Package{...},
                    Docs:      wit.Docs{
                      Contents: "",
                    },
                  },
                  Docs: wit.Docs{
                    Contents: "",
                  },
                },
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "empty": &wit.Interface{
            Name:      &"empty",
            TypeDefs:  map[string]*wit.TypeDef{},
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "foo":            &wit.Interface{...},
          "trailing-comma": &wit.Interface{
            Name:     &"trailing-comma",
            TypeDefs: map[string]*wit.TypeDef{
              "the-foo": &wit.TypeDef{
                Name: &"the-foo",
                Kind: &wit.Record{
                  Fields: []wit.Field{
                    wit.Field{
                      Name: "a",
                      Type: &wit.TypeDef{
                        Name:  &"the-type",
                        Kind:  &wit.TypeDef{...},
                        Owner: &wit.Interface{...},
                        Docs:  wit.Docs{
                          Contents: "",
                        },
                      },
                      Docs: wit.Docs{
                        Contents: "",
                      },
                    },
                  },
                },
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "the-type": &wit.TypeDef{...},
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "use-from-empty": &wit.Interface{
            Name:      &"use-from-empty",
            TypeDefs:  map[string]*wit.TypeDef{},
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "use-multiple": &wit.Interface{
            Name:     &"use-multiple",
            TypeDefs: map[string]*wit.TypeDef{
              "test": &wit.TypeDef{
                Name:  &"test",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "the-type": &wit.TypeDef{
                Name:  &"the-type",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{
              "some-function": &wit.Function{
                Name:   "some-function",
                Kind:   &wit.Freestanding{},
                Params: []wit.Param{
                  wit.Param{
                    Name: "x",
                    Type: &wit.TypeDef{...},
                  },
                },
                Results: []wit.Param{
                  wit.Param{
                    Name: "",
                    Type: &wit.TypeDef{...},
                  },
                },
                Docs: wit.Docs{
                  Contents: "",
                },
              },
            },
            Package: &wit.Package{...},
            Docs:    wit.Docs{
              Contents: "",
            },
          },
        },
        Worlds: map[string]*wit.World{},
        Docs:   wit.Docs{
          Contents: "",
        },
      },
      Docs: wit.Docs{
        Contents: "",
      },
    },
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
  },
  TypeDefs: []*wit.TypeDef{
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
  },
  Packages: []*wit.Package{
    &wit.Package{...},
  },
}