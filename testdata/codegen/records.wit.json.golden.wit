package foo:foo;

interface records {
	/// NB: this record used to be empty, but that's no longer valid, so now it's
	/// non-empty. Don't want to delete the whole test however.
	record empty { not-empty-anymore: bool }

	/// A record containing two scalar fields
	/// that both have the same type
	record scalars {
		/// The first field, named a
		a: u32,
		/// The second field, named b
		b: u32,
	}

	/// A record that is really just flags
	/// All of the fields are bool
	record really-flags {
		a: bool,
		b: bool,
		c: bool,
		d: bool,
		e: bool,
		f: bool,
		g: bool,
		h: bool,
		i: bool,
	}
	record aggregates {
		a: scalars,
		b: u32,
		c: empty,
		d: string,
		e: really-flags,
	}
	type tuple-typedef = tuple<s32>;
	type int-typedef = s32;
	type tuple-typedef2 = tuple<int-typedef>;
	tuple-arg: func(x: tuple<char, u32>);
	tuple-result: func() -> tuple<char, u32>;
	empty-arg: func(x: empty);
	empty-result: func() -> empty;
	scalar-arg: func(x: scalars);
	scalar-result: func() -> scalars;
	flags-arg: func(x: really-flags);
	flags-result: func() -> really-flags;
	aggregate-arg: func(x: aggregates);
	aggregate-result: func() -> aggregates;
	typedef-inout: func(e: tuple-typedef2) -> s32;
}

world the-world {
	import records;
	export records;
}
