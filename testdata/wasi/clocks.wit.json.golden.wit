package wasi:io;

interface poll {
    resource pollable;
    poll-list: func(in: list<borrow<pollable>>) -> list<u32>;
    poll-one: func(in: borrow<pollable>);
}

interface streams {
    resource input-stream {
        constructor: func(self: borrow<input-stream>, len: u64) -> result<tuple<list<u8>, stream-status>, _>;
        constructor: func(self: borrow<input-stream>, len: u64) -> result<tuple<u64, stream-status>, _>;
        constructor: func(self: borrow<input-stream>, len: u64) -> result<tuple<list<u8>, stream-status>, _>;
        constructor: func(self: borrow<input-stream>, len: u64) -> result<tuple<u64, stream-status>, _>;
        constructor: func(self: borrow<input-stream>) -> own<pollable>;
    };
    resource output-stream {
        constructor: func(self: borrow<output-stream>) -> result<_, write-error>;
        constructor: func(self: borrow<output-stream>, src: own<input-stream>, len: u64) -> result<tuple<u64, stream-status>, _>;
        constructor: func(self: borrow<output-stream>, contents: list<u8>) -> result<_, write-error>;
        constructor: func(self: borrow<output-stream>, len: u64) -> result<_, write-error>;
        constructor: func(self: borrow<output-stream>) -> result<u64, write-error>;
        constructor: func(self: borrow<output-stream>) -> result<_, write-error>;
        constructor: func(self: borrow<output-stream>, src: own<input-stream>) -> result<tuple<u64, stream-status>, _>;
        constructor: func(self: borrow<output-stream>, src: own<input-stream>, len: u64) -> result<tuple<u64, stream-status>, _>;
        constructor: func(self: borrow<output-stream>) -> own<pollable>;
        constructor: func(self: borrow<output-stream>, contents: list<u8>) -> result<_, write-error>;
        constructor: func(self: borrow<output-stream>, len: u64) -> result<_, write-error>;
    };
    use poll.{pollable};
    enum stream-status { open, ended };
    enum write-error {
        last-operation-failed,
        closed
    };
}

world imports {
    import poll;
    import streams;
}


package wasi:clocks;

interface monotonic-clock {
    type instant = u64;
    use wasi:io/poll.{pollable};
    now: func() -> instant;
    resolution: func() -> instant;
    subscribe: func(when: instant, absolute: bool) -> own<pollable>;
}

interface timezone {
    use wall-clock.{datetime};
    record timezone-display {
        utc-offset: s32,
        name: string,
        in-daylight-saving-time: bool
    };
    display: func(when: datetime) -> timezone-display;
    utc-offset: func(when: datetime) -> s32;
}

interface wall-clock {
    record datetime {
        seconds: u64,
        nanoseconds: u32
    };
    now: func() -> datetime;
    resolution: func() -> datetime;
}

world imports {
    import wasi:io/poll;
    import monotonic-clock;
    import wall-clock;
    import timezone;
}
