{
  "worlds": [
    {
      "name": "imports",
      "imports": {
        "interface-0": {
          "interface": 0
        },
        "interface-1": {
          "interface": 1
        },
        "interface-2": {
          "interface": 2
        }
      },
      "exports": {},
      "package": 0
    },
    {
      "name": "imports",
      "imports": {
        "interface-1": {
          "interface": 1
        },
        "interface-3": {
          "interface": 3
        },
        "interface-4": {
          "interface": 4
        }
      },
      "exports": {},
      "package": 1
    }
  ],
  "interfaces": [
    {
      "name": "error",
      "types": {
        "error": 0
      },
      "functions": {
        "[method]error.to-debug-string": {
          "name": "[method]error.to-debug-string",
          "kind": {
            "method": 0
          },
          "params": [
            {
              "name": "self",
              "type": 1
            }
          ],
          "results": [
            {
              "type": "string"
            }
          ],
          "docs": {
            "contents": "Returns a string that is suitable to assist humans in debugging\nthis error.\n\nWARNING: The returned string should not be consumed mechanically!\nIt may change across platforms, hosts, or other implementation\ndetails. Parsing this string is a major platform-compatibility\nhazard."
          }
        }
      },
      "package": 0
    },
    {
      "name": "poll",
      "types": {
        "pollable": 2
      },
      "functions": {
        "[method]pollable.ready": {
          "name": "[method]pollable.ready",
          "kind": {
            "method": 2
          },
          "params": [
            {
              "name": "self",
              "type": 3
            }
          ],
          "results": [
            {
              "type": "bool"
            }
          ],
          "docs": {
            "contents": "Return the readiness of a pollable. This function never blocks.\n\nReturns `true` when the pollable is ready, and `false` otherwise."
          }
        },
        "[method]pollable.block": {
          "name": "[method]pollable.block",
          "kind": {
            "method": 2
          },
          "params": [
            {
              "name": "self",
              "type": 3
            }
          ],
          "results": [],
          "docs": {
            "contents": "`block` returns immediately if the pollable is ready, and otherwise\nblocks until ready.\n\nThis function is equivalent to calling `poll.poll` on a list\ncontaining only this pollable."
          }
        },
        "poll": {
          "name": "poll",
          "kind": "freestanding",
          "params": [
            {
              "name": "in",
              "type": 4
            }
          ],
          "results": [
            {
              "type": 5
            }
          ],
          "docs": {
            "contents": "Poll for completion on a set of pollables.\n\nThis function takes a list of pollables, which identify I/O sources of\ninterest, and waits until one or more of the events is ready for I/O.\n\nThe result `list<u32>` contains one or more indices of handles in the\nargument list that is ready for I/O.\n\nIf the list contains more elements than can be indexed with a `u32`\nvalue, this function traps.\n\nA timeout can be implemented by adding a pollable from the\nwasi-clocks API to the list.\n\nThis function does not return a `result`; polling in itself does not\ndo any I/O so it doesn't fail. If any of the I/O sources identified by\nthe pollables has an error, it is indicated by marking the source as\nbeing reaedy for I/O."
          }
        }
      },
      "docs": {
        "contents": "A poll API intended to let users wait for I/O events on multiple handles\nat once."
      },
      "package": 0
    },
    {
      "name": "streams",
      "types": {
        "error": 6,
        "pollable": 7,
        "stream-error": 9,
        "input-stream": 10,
        "output-stream": 11
      },
      "functions": {
        "[method]input-stream.read": {
          "name": "[method]input-stream.read",
          "kind": {
            "method": 10
          },
          "params": [
            {
              "name": "self",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 14
            }
          ],
          "docs": {
            "contents": "Perform a non-blocking read from the stream.\n\nWhen the source of a `read` is binary data, the bytes from the source\nare returned verbatim. When the source of a `read` is known to the\nimplementation to be text, bytes containing the UTF-8 encoding of the\ntext are returned.\n\nThis function returns a list of bytes containing the read data,\nwhen successful. The returned list will contain up to `len` bytes;\nit may return fewer than requested, but not more. The list is\nempty when no bytes are available for reading at this time. The\npollable given by `subscribe` will be ready when more bytes are\navailable.\n\nThis function fails with a `stream-error` when the operation\nencounters an error, giving `last-operation-failed`, or when the\nstream is closed, giving `closed`.\n\nWhen the caller gives a `len` of 0, it represents a request to\nread 0 bytes. If the stream is still open, this call should\nsucceed and return an empty list, or otherwise fail with `closed`.\n\nThe `len` parameter is a `u64`, which could represent a list of u8 which\nis not possible to allocate in wasm32, or not desirable to allocate as\nas a return value by the callee. The callee may return a list of bytes\nless than `len` in size while more bytes are available for reading."
          }
        },
        "[method]input-stream.blocking-read": {
          "name": "[method]input-stream.blocking-read",
          "kind": {
            "method": 10
          },
          "params": [
            {
              "name": "self",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 14
            }
          ],
          "docs": {
            "contents": "Read bytes from a stream, after blocking until at least one byte can\nbe read. Except for blocking, behavior is identical to `read`."
          }
        },
        "[method]input-stream.skip": {
          "name": "[method]input-stream.skip",
          "kind": {
            "method": 10
          },
          "params": [
            {
              "name": "self",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 15
            }
          ],
          "docs": {
            "contents": "Skip bytes from a stream. Returns number of bytes skipped.\n\nBehaves identical to `read`, except instead of returning a list\nof bytes, returns the number of bytes consumed from the stream."
          }
        },
        "[method]input-stream.blocking-skip": {
          "name": "[method]input-stream.blocking-skip",
          "kind": {
            "method": 10
          },
          "params": [
            {
              "name": "self",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 15
            }
          ],
          "docs": {
            "contents": "Skip bytes from a stream, after blocking until at least one byte\ncan be skipped. Except for blocking behavior, identical to `skip`."
          }
        },
        "[method]input-stream.subscribe": {
          "name": "[method]input-stream.subscribe",
          "kind": {
            "method": 10
          },
          "params": [
            {
              "name": "self",
              "type": 12
            }
          ],
          "results": [
            {
              "type": 18
            }
          ],
          "docs": {
            "contents": "Create a `pollable` which will resolve once either the specified stream\nhas bytes available to read or the other end of the stream has been\nclosed.\nThe created `pollable` is a child resource of the `input-stream`.\nImplementations may trap if the `input-stream` is dropped before\nall derived `pollable`s created with this function are dropped."
          }
        },
        "[method]output-stream.check-write": {
          "name": "[method]output-stream.check-write",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            }
          ],
          "results": [
            {
              "type": 15
            }
          ],
          "docs": {
            "contents": "Check readiness for writing. This function never blocks.\n\nReturns the number of bytes permitted for the next call to `write`,\nor an error. Calling `write` with more bytes than this function has\npermitted will trap.\n\nWhen this function returns 0 bytes, the `subscribe` pollable will\nbecome ready when this function will report at least 1 byte, or an\nerror."
          }
        },
        "[method]output-stream.write": {
          "name": "[method]output-stream.write",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "contents",
              "type": 13
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Perform a write. This function never blocks.\n\nWhen the destination of a `write` is binary data, the bytes from\n`contents` are written verbatim. When the destination of a `write` is\nknown to the implementation to be text, the bytes of `contents` are\ntranscoded from UTF-8 into the encoding of the destination and then\nwritten.\n\nPrecondition: check-write gave permit of Ok(n) and contents has a\nlength of less than or equal to n. Otherwise, this function will trap.\n\nreturns Err(closed) without writing if the stream has closed since\nthe last call to check-write provided a permit."
          }
        },
        "[method]output-stream.blocking-write-and-flush": {
          "name": "[method]output-stream.blocking-write-and-flush",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "contents",
              "type": 13
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Perform a write of up to 4096 bytes, and then flush the stream. Block\nuntil all of these operations are complete, or an error occurs.\n\nThis is a convenience wrapper around the use of `check-write`,\n`subscribe`, `write`, and `flush`, and is implemented with the\nfollowing pseudo-code:\n\n```text\nlet pollable = this.subscribe();\nwhile !contents.is_empty() {\n// Wait for the stream to become writable\npollable.block();\nlet Ok(n) = this.check-write(); // eliding error handling\nlet len = min(n, contents.len());\nlet (chunk, rest) = contents.split_at(len);\nthis.write(chunk  );            // eliding error handling\ncontents = rest;\n}\nthis.flush();\n// Wait for completion of `flush`\npollable.block();\n// Check for any errors that arose during `flush`\nlet _ = this.check-write();         // eliding error handling\n```"
          }
        },
        "[method]output-stream.flush": {
          "name": "[method]output-stream.flush",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Request to flush buffered output. This function never blocks.\n\nThis tells the output-stream that the caller intends any buffered\noutput to be flushed. the output which is expected to be flushed\nis all that has been passed to `write` prior to this call.\n\nUpon calling this function, the `output-stream` will not accept any\nwrites (`check-write` will return `ok(0)`) until the flush has\ncompleted. The `subscribe` pollable will become ready when the\nflush has completed and the stream can accept more writes."
          }
        },
        "[method]output-stream.blocking-flush": {
          "name": "[method]output-stream.blocking-flush",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Request to flush buffered output, and block until flush completes\nand stream is ready for writing again."
          }
        },
        "[method]output-stream.subscribe": {
          "name": "[method]output-stream.subscribe",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            }
          ],
          "results": [
            {
              "type": 18
            }
          ],
          "docs": {
            "contents": "Create a `pollable` which will resolve once the output-stream\nis ready for more writing, or an error has occured. When this\npollable is ready, `check-write` will return `ok(n)` with n>0, or an\nerror.\n\nIf the stream is closed, this pollable is always ready immediately.\n\nThe created `pollable` is a child resource of the `output-stream`.\nImplementations may trap if the `output-stream` is dropped before\nall derived `pollable`s created with this function are dropped."
          }
        },
        "[method]output-stream.write-zeroes": {
          "name": "[method]output-stream.write-zeroes",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Write zeroes to a stream.\n\nThis should be used precisely like `write` with the exact same\npreconditions (must use check-write first), but instead of\npassing a list of bytes, you simply pass the number of zero-bytes\nthat should be written."
          }
        },
        "[method]output-stream.blocking-write-zeroes-and-flush": {
          "name": "[method]output-stream.blocking-write-zeroes-and-flush",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 17
            }
          ],
          "docs": {
            "contents": "Perform a write of up to 4096 zeroes, and then flush the stream.\nBlock until all of these operations are complete, or an error\noccurs.\n\nThis is a convenience wrapper around the use of `check-write`,\n`subscribe`, `write-zeroes`, and `flush`, and is implemented with\nthe following pseudo-code:\n\n```text\nlet pollable = this.subscribe();\nwhile num_zeroes != 0 {\n// Wait for the stream to become writable\npollable.block();\nlet Ok(n) = this.check-write(); // eliding error handling\nlet len = min(n, num_zeroes);\nthis.write-zeroes(len);         // eliding error handling\nnum_zeroes -= len;\n}\nthis.flush();\n// Wait for completion of `flush`\npollable.block();\n// Check for any errors that arose during `flush`\nlet _ = this.check-write();         // eliding error handling\n```"
          }
        },
        "[method]output-stream.splice": {
          "name": "[method]output-stream.splice",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "src",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 15
            }
          ],
          "docs": {
            "contents": "Read from one stream and write to another.\n\nThe behavior of splice is equivelant to:\n1. calling `check-write` on the `output-stream`\n2. calling `read` on the `input-stream` with the smaller of the\n`check-write` permitted length and the `len` provided to `splice`\n3. calling `write` on the `output-stream` with that read data.\n\nAny error reported by the call to `check-write`, `read`, or\n`write` ends the splice and reports that error.\n\nThis function returns the number of bytes transferred; it may be less\nthan `len`."
          }
        },
        "[method]output-stream.blocking-splice": {
          "name": "[method]output-stream.blocking-splice",
          "kind": {
            "method": 11
          },
          "params": [
            {
              "name": "self",
              "type": 16
            },
            {
              "name": "src",
              "type": 12
            },
            {
              "name": "len",
              "type": "u64"
            }
          ],
          "results": [
            {
              "type": 15
            }
          ],
          "docs": {
            "contents": "Read from one stream and write to another, with blocking.\n\nThis is similar to `splice`, except that it blocks until the\n`output-stream` is ready for writing, and the `input-stream`\nis ready for reading, before performing the `splice`."
          }
        }
      },
      "docs": {
        "contents": "WASI I/O is an I/O abstraction API which is currently focused on providing\nstream types.\n\nIn the future, the component model is expected to add built-in stream types;\nwhen it does, they are expected to subsume this API."
      },
      "package": 0
    },
    {
      "name": "monotonic-clock",
      "types": {
        "pollable": 19,
        "instant": 20,
        "duration": 21
      },
      "functions": {
        "now": {
          "name": "now",
          "kind": "freestanding",
          "params": [],
          "results": [
            {
              "type": 20
            }
          ],
          "docs": {
            "contents": "Read the current value of the clock.\n\nThe clock is monotonic, therefore calling this function repeatedly will\nproduce a sequence of non-decreasing values."
          }
        },
        "resolution": {
          "name": "resolution",
          "kind": "freestanding",
          "params": [],
          "results": [
            {
              "type": 21
            }
          ],
          "docs": {
            "contents": "Query the resolution of the clock. Returns the duration of time\ncorresponding to a clock tick."
          }
        },
        "subscribe-instant": {
          "name": "subscribe-instant",
          "kind": "freestanding",
          "params": [
            {
              "name": "when",
              "type": 20
            }
          ],
          "results": [
            {
              "type": 23
            }
          ],
          "docs": {
            "contents": "Create a `pollable` which will resolve once the specified instant\noccured."
          }
        },
        "subscribe-duration": {
          "name": "subscribe-duration",
          "kind": "freestanding",
          "params": [
            {
              "name": "when",
              "type": 21
            }
          ],
          "results": [
            {
              "type": 23
            }
          ],
          "docs": {
            "contents": "Create a `pollable` which will resolve once the given duration has\nelapsed, starting at the time at which this function was called.\noccured."
          }
        }
      },
      "docs": {
        "contents": "WASI Monotonic Clock is a clock API intended to let users measure elapsed\ntime.\n\nIt is intended to be portable at least between Unix-family platforms and\nWindows.\n\nA monotonic clock is a clock which has an unspecified initial value, and\nsuccessive reads of the clock will produce non-decreasing values.\n\nIt is intended for measuring elapsed time."
      },
      "package": 1
    },
    {
      "name": "wall-clock",
      "types": {
        "datetime": 22
      },
      "functions": {
        "now": {
          "name": "now",
          "kind": "freestanding",
          "params": [],
          "results": [
            {
              "type": 22
            }
          ],
          "docs": {
            "contents": "Read the current value of the clock.\n\nThis clock is not monotonic, therefore calling this function repeatedly\nwill not necessarily produce a sequence of non-decreasing values.\n\nThe returned timestamps represent the number of seconds since\n1970-01-01T00:00:00Z, also known as [POSIX's Seconds Since the Epoch],\nalso known as [Unix Time].\n\nThe nanoseconds field of the output is always less than 1000000000.\n\n[POSIX's Seconds Since the Epoch]: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap04.html#tag_21_04_16\n[Unix Time]: https://en.wikipedia.org/wiki/Unix_time"
          }
        },
        "resolution": {
          "name": "resolution",
          "kind": "freestanding",
          "params": [],
          "results": [
            {
              "type": 22
            }
          ],
          "docs": {
            "contents": "Query the resolution of the clock.\n\nThe nanoseconds field of the output is always less than 1000000000."
          }
        }
      },
      "docs": {
        "contents": "WASI Wall Clock is a clock API intended to let users query the current\ntime. The name \"wall\" makes an analogy to a \"clock on the wall\", which\nis not necessarily monotonic as it may be reset.\n\nIt is intended to be portable at least between Unix-family platforms and\nWindows.\n\nA wall clock is a clock which measures the date and time according to\nsome external reference.\n\nExternal references may be reset, so this clock is not necessarily\nmonotonic, making it unsuitable for measuring elapsed time.\n\nIt is intended for reporting the current date and time for humans."
      },
      "package": 1
    }
  ],
  "types": [
    {
      "name": "error",
      "kind": "resource",
      "owner": {
        "interface": 0
      },
      "docs": {
        "contents": "A resource which represents some error information.\n\nThe only method provided by this resource is `to-debug-string`,\nwhich provides some human-readable information about the error.\n\nIn the `wasi:io` package, this resource is returned through the\n`wasi:io/streams/stream-error` type.\n\nTo provide more specific error information, other interfaces may\nprovide functions to further \"downcast\" this error into more specific\nerror information. For example, `error`s returned in streams derived\nfrom filesystem types to be described using the filesystem's own\nerror-code type, using the function\n`wasi:filesystem/types/filesystem-error-code`, which takes a parameter\n`borrow<error>` and returns\n`option<wasi:filesystem/types/error-code>`.\n\nThe set of functions which can \"downcast\" an `error` into a more\nconcrete type is open."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "borrow": 0
        }
      },
      "owner": null
    },
    {
      "name": "pollable",
      "kind": "resource",
      "owner": {
        "interface": 1
      },
      "docs": {
        "contents": "`pollable` represents a single I/O event which may be ready, or not."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "borrow": 2
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "list": 3
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "list": "u32"
      },
      "owner": null
    },
    {
      "name": "error",
      "kind": {
        "type": 0
      },
      "owner": {
        "interface": 2
      }
    },
    {
      "name": "pollable",
      "kind": {
        "type": 2
      },
      "owner": {
        "interface": 2
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "own": 6
        }
      },
      "owner": null
    },
    {
      "name": "stream-error",
      "kind": {
        "variant": {
          "cases": [
            {
              "name": "last-operation-failed",
              "type": 8,
              "docs": {
                "contents": "The last operation (a write or flush) failed before completion.\n\nMore information is available in the `error` payload."
              }
            },
            {
              "name": "closed",
              "type": null,
              "docs": {
                "contents": "The stream is closed: no more input will be accepted by the\nstream. A closed output-stream will return this error on all\nfuture operations."
              }
            }
          ]
        }
      },
      "owner": {
        "interface": 2
      },
      "docs": {
        "contents": "An error for input-stream and output-stream operations."
      }
    },
    {
      "name": "input-stream",
      "kind": "resource",
      "owner": {
        "interface": 2
      },
      "docs": {
        "contents": "An input bytestream.\n\n`input-stream`s are *non-blocking* to the extent practical on underlying\nplatforms. I/O operations always return promptly; if fewer bytes are\npromptly available than requested, they return the number of bytes promptly\navailable, which could even be zero. To wait for data to be available,\nuse the `subscribe` function to obtain a `pollable` which can be polled\nfor using `wasi:io/poll`."
      }
    },
    {
      "name": "output-stream",
      "kind": "resource",
      "owner": {
        "interface": 2
      },
      "docs": {
        "contents": "An output bytestream.\n\n`output-stream`s are *non-blocking* to the extent practical on\nunderlying platforms. Except where specified otherwise, I/O operations also\nalways return promptly, after the number of bytes that can be written\npromptly, which could even be zero. To wait for the stream to be ready to\naccept data, the `subscribe` function to obtain a `pollable` which can be\npolled for using `wasi:io/poll`."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "borrow": 10
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "list": "u8"
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "result": {
          "ok": 13,
          "err": 9
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "result": {
          "ok": "u64",
          "err": 9
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "borrow": 11
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "result": {
          "ok": null,
          "err": 9
        }
      },
      "owner": null
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "own": 7
        }
      },
      "owner": null
    },
    {
      "name": "pollable",
      "kind": {
        "type": 2
      },
      "owner": {
        "interface": 3
      }
    },
    {
      "name": "instant",
      "kind": {
        "type": "u64"
      },
      "owner": {
        "interface": 3
      },
      "docs": {
        "contents": "An instant in time, in nanoseconds. An instant is relative to an\nunspecified initial value, and can only be compared to instances from\nthe same monotonic-clock."
      }
    },
    {
      "name": "duration",
      "kind": {
        "type": "u64"
      },
      "owner": {
        "interface": 3
      },
      "docs": {
        "contents": "A duration of time, in nanoseconds."
      }
    },
    {
      "name": "datetime",
      "kind": {
        "record": {
          "fields": [
            {
              "name": "seconds",
              "type": "u64"
            },
            {
              "name": "nanoseconds",
              "type": "u32"
            }
          ]
        }
      },
      "owner": {
        "interface": 4
      },
      "docs": {
        "contents": "A time and date in seconds plus nanoseconds."
      }
    },
    {
      "name": null,
      "kind": {
        "handle": {
          "own": 19
        }
      },
      "owner": null
    }
  ],
  "packages": [
    {
      "name": "wasi:io@0.2.0",
      "interfaces": {
        "error": 0,
        "poll": 1,
        "streams": 2
      },
      "worlds": {
        "imports": 0
      }
    },
    {
      "name": "wasi:clocks@0.2.0",
      "interfaces": {
        "monotonic-clock": 3,
        "wall-clock": 4
      },
      "worlds": {
        "imports": 1
      }
    }
  ]
}