&wit.Resolve{
  Worlds: []*wit.World{
    &wit.World{
      Name:    "wasi",
      Imports: map[string]wit.WorldItem{
        "interface-7": &wit.Interface{
          Name:     &"clocks",
          TypeDefs: map[string]*wit.TypeDef{
            "timestamp": &wit.TypeDef{
              Name:  &"timestamp",
              Kind:  wit.U64{},
              Owner: &wit.Interface{...},
              Docs:  wit.Docs{
                Contents: "",
              },
            },
          },
          Functions: map[string]*wit.Function{},
          Package:   &wit.Package{
            Name: wit.PackageName{
              Namespace: "foo",
              Name:      "wasi",
              Version:   (*semver.Version)(nil),
            },
            Interfaces: map[string]*wit.Interface{
              "clocks":     &wit.Interface{...},
              "filesystem": &wit.Interface{
                Name:     &"filesystem",
                TypeDefs: map[string]*wit.TypeDef{
                  "stat": &wit.TypeDef{
                    Name: &"stat",
                    Kind: &wit.Record{
                      Fields: []wit.Field{
                        wit.Field{
                          Name: "ino",
                          Type: wit.U64{},
                          Docs: wit.Docs{
                            Contents: "",
                          },
                        },
                      },
                    },
                    Owner: &wit.Interface{...},
                    Docs:  wit.Docs{
                      Contents: "",
                    },
                  },
                },
                Functions: map[string]*wit.Function{},
                Package:   &wit.Package{...},
                Docs:      wit.Docs{
                  Contents: "",
                },
              },
            },
            Worlds: map[string]*wit.World{
              "wasi": &wit.World{...},
            },
            Docs: wit.Docs{
              Contents: "",
            },
          },
          Docs: wit.Docs{
            Contents: "",
          },
        },
        "interface-8": &wit.Interface{...},
      },
      Exports: map[string]wit.WorldItem{},
      Package: &wit.Package{...},
      Docs:    wit.Docs{
        Contents: "",
      },
    },
    &wit.World{
      Name:    "my-world",
      Imports: map[string]wit.WorldItem{
        "interface-7": &wit.Interface{...},
        "interface-8": &wit.Interface{...},
      },
      Exports: map[string]wit.WorldItem{
        "interface-1": &wit.Interface{
          Name:      &"saas",
          TypeDefs:  map[string]*wit.TypeDef{},
          Functions: map[string]*wit.Function{},
          Package:   &wit.Package{
            Name: wit.PackageName{
              Namespace: "foo",
              Name:      "corp",
              Version:   (*semver.Version)(nil),
            },
            Interfaces: map[string]*wit.Interface{
              "saas": &wit.Interface{...},
            },
            Worlds: map[string]*wit.World{},
            Docs:   wit.Docs{
              Contents: "",
            },
          },
          Docs: wit.Docs{
            Contents: "",
          },
        },
      },
      Package: &wit.Package{
        Name: wit.PackageName{
          Namespace: "foo",
          Name:      "root",
          Version:   (*semver.Version)(nil),
        },
        Interfaces: map[string]*wit.Interface{
          "bar": &wit.Interface{
            Name:     &"bar",
            TypeDefs: map[string]*wit.TypeDef{
              "another-type": &wit.TypeDef{
                Name: &"another-type",
                Kind: &wit.TypeDef{
                  Name:  &"another-type",
                  Kind:  wit.U32{},
                  Owner: &wit.Interface{
                    Name:     &"some-interface",
                    TypeDefs: map[string]*wit.TypeDef{
                      "another-type": &wit.TypeDef{...},
                    },
                    Functions: map[string]*wit.Function{},
                    Package:   &wit.Package{
                      Name: wit.PackageName{
                        Namespace: "foo",
                        Name:      "some-pkg",
                        Version:   (*semver.Version)(nil),
                      },
                      Interfaces: map[string]*wit.Interface{
                        "another-interface": &wit.Interface{
                          Name:     &"another-interface",
                          TypeDefs: map[string]*wit.TypeDef{
                            "yet-another-type": &wit.TypeDef{
                              Name:  &"yet-another-type",
                              Kind:  wit.U8{},
                              Owner: &wit.Interface{...},
                              Docs:  wit.Docs{
                                Contents: "",
                              },
                            },
                          },
                          Functions: map[string]*wit.Function{},
                          Package:   &wit.Package{...},
                          Docs:      wit.Docs{
                            Contents: "",
                          },
                        },
                        "some-interface": &wit.Interface{...},
                        "the-default":    &wit.Interface{
                          Name:     &"the-default",
                          TypeDefs: map[string]*wit.TypeDef{
                            "from-default": &wit.TypeDef{
                              Name:  &"from-default",
                              Kind:  wit.String{},
                              Owner: &wit.Interface{...},
                              Docs:  wit.Docs{
                                Contents: "",
                              },
                            },
                          },
                          Functions: map[string]*wit.Function{},
                          Package:   &wit.Package{...},
                          Docs:      wit.Docs{
                            Contents: "",
                          },
                        },
                      },
                      Worlds: map[string]*wit.World{},
                      Docs:   wit.Docs{
                        Contents: "",
                      },
                    },
                    Docs: wit.Docs{
                      Contents: "",
                    },
                  },
                  Docs: wit.Docs{
                    Contents: "",
                  },
                },
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "from-default": &wit.TypeDef{
                Name:  &"from-default",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "yet-another-type": &wit.TypeDef{
                Name:  &"yet-another-type",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "foo": &wit.Interface{
            Name:     &"foo",
            TypeDefs: map[string]*wit.TypeDef{
              "stat": &wit.TypeDef{
                Name:  &"stat",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
              "timestamp": &wit.TypeDef{
                Name:  &"timestamp",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "use1": &wit.Interface{
            Name:     &"use1",
            TypeDefs: map[string]*wit.TypeDef{
              "some-type": &wit.TypeDef{
                Name: &"some-type",
                Kind: &wit.TypeDef{
                  Name:  &"some-type",
                  Kind:  wit.U32{},
                  Owner: &wit.Interface{
                    Name:     &"the-default",
                    TypeDefs: map[string]*wit.TypeDef{
                      "some-type": &wit.TypeDef{...},
                    },
                    Functions: map[string]*wit.Function{},
                    Package:   &wit.Package{
                      Name: wit.PackageName{
                        Namespace: "foo",
                        Name:      "foreign-pkg",
                        Version:   (*semver.Version)(nil),
                      },
                      Interfaces: map[string]*wit.Interface{
                        "the-default": &wit.Interface{...},
                      },
                      Worlds: map[string]*wit.World{},
                      Docs:   wit.Docs{
                        Contents: "",
                      },
                    },
                    Docs: wit.Docs{
                      Contents: "",
                    },
                  },
                  Docs: wit.Docs{
                    Contents: "",
                  },
                },
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
          "use2": &wit.Interface{
            Name:     &"use2",
            TypeDefs: map[string]*wit.TypeDef{
              "some-type": &wit.TypeDef{
                Name:  &"some-type",
                Kind:  &wit.TypeDef{...},
                Owner: &wit.Interface{...},
                Docs:  wit.Docs{
                  Contents: "",
                },
              },
            },
            Functions: map[string]*wit.Function{},
            Package:   &wit.Package{...},
            Docs:      wit.Docs{
              Contents: "",
            },
          },
        },
        Worlds: map[string]*wit.World{
          "bars-world": &wit.World{
            Name:    "bars-world",
            Imports: map[string]wit.WorldItem{
              "interface-0": &wit.Interface{
                Name:      &"other-interface",
                TypeDefs:  map[string]*wit.TypeDef{},
                Functions: map[string]*wit.Function{},
                Package:   &wit.Package{
                  Name: wit.PackageName{
                    Namespace: "foo",
                    Name:      "another-pkg",
                    Version:   (*semver.Version)(nil),
                  },
                  Interfaces: map[string]*wit.Interface{
                    "other-interface": &wit.Interface{...},
                  },
                  Worlds: map[string]*wit.World{},
                  Docs:   wit.Docs{
                    Contents: "",
                  },
                },
                Docs: wit.Docs{
                  Contents: "",
                },
              },
              "interface-4": &wit.Interface{...},
            },
            Exports: map[string]wit.WorldItem{},
            Package: &wit.Package{...},
            Docs:    wit.Docs{
              Contents: "",
            },
          },
          "my-world":  &wit.World{...},
          "my-world2": &wit.World{
            Name:    "my-world2",
            Imports: map[string]wit.WorldItem{
              "interface-7": &wit.Interface{...},
              "interface-8": &wit.Interface{...},
            },
            Exports: map[string]wit.WorldItem{
              "interface-1": &wit.Interface{...},
              "interface-9": &wit.Interface{...},
            },
            Package: &wit.Package{...},
            Docs:    wit.Docs{
              Contents: "",
            },
          },
          "unionw-world": &wit.World{
            Name:    "unionw-world",
            Imports: map[string]wit.WorldItem{
              "interface-7": &wit.Interface{...},
              "interface-8": &wit.Interface{...},
            },
            Exports: map[string]wit.WorldItem{
              "interface-1": &wit.Interface{...},
              "interface-9": &wit.Interface{...},
            },
            Package: &wit.Package{...},
            Docs:    wit.Docs{
              Contents: "",
            },
          },
        },
        Docs: wit.Docs{
          Contents: "",
        },
      },
      Docs: wit.Docs{
        Contents: "",
      },
    },
    &wit.World{...},
    &wit.World{...},
    &wit.World{...},
  },
  Interfaces: []*wit.Interface{
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{
      Name:      &"i",
      TypeDefs:  map[string]*wit.TypeDef{},
      Functions: map[string]*wit.Function{},
      Package:   &wit.Package{
        Name: wit.PackageName{
          Namespace: "foo",
          Name:      "different-pkg",
          Version:   (*semver.Version)(nil),
        },
        Interfaces: map[string]*wit.Interface{
          "i": &wit.Interface{...},
        },
        Worlds: map[string]*wit.World{},
        Docs:   wit.Docs{
          Contents: "",
        },
      },
      Docs: wit.Docs{
        Contents: "",
      },
    },
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
  },
  TypeDefs: []*wit.TypeDef{
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
  },
  Packages: []*wit.Package{
    &wit.Package{...},
    &wit.Package{...},
    &wit.Package{...},
    &wit.Package{...},
    &wit.Package{...},
    &wit.Package{...},
    &wit.Package{...},
  },
}