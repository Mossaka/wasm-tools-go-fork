package a:b;

@unstable(feature = active)
interface ungated {
	@unstable(feature = active)
	ungated: func();
}

@unstable(feature = active)
interface ungated2 {
	@unstable(feature = active)
	type ungated = u32;
	@unstable(feature = active)
	type ungated2 = ungated;
}

@unstable(feature = active)
interface ungated-use-target {
	@unstable(feature = active)
	type t = u32;
}

@unstable(feature = active)
interface ungated-use {
	@unstable(feature = active)
	use ungated-use-target.{t};
}

@unstable(feature = active)
interface ungated-for-world {}

interface with-resources {
	@unstable(feature = active)
	resource ungated {
		@unstable(feature = active)
		constructor();
		@unstable(feature = active)
		y: func();
		@unstable(feature = active)
		x: static func();
	}
}

@unstable(feature = active)
world ungated-world {
	@unstable(feature = active)
	import ungated-for-world;
	@unstable(feature = active)
	export ungated-for-world;
}

world mixed-world {
	@unstable(feature = active)
	import ungated-for-world;
	@unstable(feature = active)
	export ungated-for-world;
}
