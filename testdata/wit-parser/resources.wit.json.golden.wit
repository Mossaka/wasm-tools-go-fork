package foo:bar;

interface foo {
    resource a;
    resource b {
        constructor: func() -> own<b>;
    };
    resource c {
        constructor: func(x: u32) -> own<c>;
    };
    resource d {
        constructor: func(x: u32) -> own<d>;
        a: func(self: borrow<d>);
        b: func();
    };
    resource e {
        constructor: func(other: own<e>, other2: borrow<e>) -> own<e>;
        method: func(self: borrow<e>, thing: own<e>, thing2: borrow<e>);
    };
}

interface i {
    resource a;
    type t1 = a;
    type t2 = borrow<a>;
    type t3 = borrow<t1>;
}

world w {
    import [constructor]c: func() -> own<c>;
    resource a;
    resource b;
    resource c {
        constructor: func() -> own<c>;
    };
}
