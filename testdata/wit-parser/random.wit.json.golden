&wit.Resolve{
    Worlds:     nil,
    Interfaces: {
        &wit.Interface{
            _typeOwner: wit._typeOwner{},
            _worldItem: wit._worldItem{},
            Name:       &"random",
            TypeDefs:   {},
            Functions:  {
                "get-random-bytes": &wit.Function{
                    _worldItem: wit._worldItem{},
                    Name:       "get-random-bytes",
                    Kind:       &wit.Freestanding{},
                    Params:     {
                        {
                            Name: "len",
                            Type: wit.U64{},
                        },
                    },
                    Results: {
                        {
                            Name: "",
                            Type: &wit.TypeDef{
                                _type:      wit._type{},
                                _worldItem: wit._worldItem{},
                                Name:       (*string)(nil),
                                Kind:       &wit.List{
                                    _typeDefKind: wit._typeDefKind{},
                                    Type:         wit.U8{},
                                },
                                Owner: nil,
                                Docs:  wit.Docs{},
                            },
                        },
                    },
                    Docs: wit.Docs{Contents:"Return `len` cryptographically-secure random or pseudo-random bytes.\n\nThis function must produce data at least as cryptographically secure and\nfast as an adequately seeded cryptographically-secure pseudo-random\nnumber generator (CSPRNG). It must not block, from the perspective of\nthe calling program, under any circumstances, including on the first\nrequest and on requests for numbers of bytes. The returned data must\nalways be unpredictable.\n\nThis function must always return fresh data. Deterministic environments\nmust omit this function, rather than implementing it with deterministic\ndata."},
                },
                "get-random-u64": &wit.Function{
                    _worldItem: wit._worldItem{},
                    Name:       "get-random-u64",
                    Kind:       &wit.Freestanding{},
                    Params:     nil,
                    Results:    {
                        {
                            Name: "",
                            Type: wit.U64{},
                        },
                    },
                    Docs: wit.Docs{Contents:"Return a cryptographically-secure random or pseudo-random `u64` value.\n\nThis function returns the same type of data as `get-random-bytes`,\nrepresented as a `u64`."},
                },
            },
            Package: &wit.Package{
                Name: wit.Ident{
                    Namespace: "wasi",
                    Package:   "random",
                    Extension: "",
                    Version:   (*semver.Version)(nil),
                },
                Interfaces: {
                    "random": &wit.Interface{(CYCLIC REFERENCE)},
                },
                Worlds: {},
                Docs:   wit.Docs{},
            },
            Docs: wit.Docs{Contents:"WASI Random is a random data API.\n\nIt is intended to be portable at least between Unix-family platforms and\nWindows."},
        },
    },
    TypeDefs: {
        &wit.TypeDef{
            _type:      wit._type{},
            _worldItem: wit._worldItem{},
            Name:       (*string)(nil),
            Kind:       &wit.List{
                _typeDefKind: wit._typeDefKind{},
                Type:         wit.U8{},
            },
            Owner: nil,
            Docs:  wit.Docs{},
        },
    },
    Packages: {
        &wit.Package{
            Name: wit.Ident{
                Namespace: "wasi",
                Package:   "random",
                Extension: "",
                Version:   (*semver.Version)(nil),
            },
            Interfaces: {
                "random": &wit.Interface{(CYCLIC REFERENCE)},
            },
            Worlds: {},
            Docs:   wit.Docs{},
        },
    },
}