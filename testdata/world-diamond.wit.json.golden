&wit.Resolve{
  Worlds: []*wit.World{
    &wit.World{
      Name:    "the-world",
      Imports: map[string]wit.WorldItem{
        "a": &wit.Function{
          Name:    "a",
          Kind:    &wit.Freestanding{},
          Params:  []wit.Param(nil),
          Results: []wit.Param(nil),
          Docs:    wit.Docs{
            Contents: "",
          },
        },
        "interface-0": &wit.Interface{
          Name:     &"shared-items",
          TypeDefs: map[string]*wit.TypeDef{
            "foo": &wit.TypeDef{
              Name:  &"foo",
              Kind:  wit.U32{},
              Owner: &wit.Interface{...},
              Docs:  wit.Docs{
                Contents: "",
              },
            },
          },
          Functions: map[string]*wit.Function{},
          Package:   &wit.Package{
            Name: wit.PackageName{
              Namespace: "foo",
              Name:      "foo",
              Version:   (*semver.Version)(nil),
            },
            Interfaces: map[string]*wit.Interface{
              "i1": &wit.Interface{
                Name:     &"i1",
                TypeDefs: map[string]*wit.TypeDef{
                  "foo": &wit.TypeDef{
                    Name:  &"foo",
                    Kind:  &wit.TypeDef{...},
                    Owner: &wit.Interface{...},
                    Docs:  wit.Docs{
                      Contents: "",
                    },
                  },
                },
                Functions: map[string]*wit.Function{
                  "a": &wit.Function{
                    Name:    "a",
                    Kind:    &wit.Freestanding{...},
                    Params:  []wit.Param(nil),
                    Results: []wit.Param{
                      wit.Param{
                        Name: "",
                        Type: &wit.TypeDef{...},
                      },
                    },
                    Docs: wit.Docs{
                      Contents: "",
                    },
                  },
                },
                Package: &wit.Package{...},
                Docs:    wit.Docs{
                  Contents: "",
                },
              },
              "i2": &wit.Interface{
                Name:     &"i2",
                TypeDefs: map[string]*wit.TypeDef{
                  "foo": &wit.TypeDef{
                    Name:  &"foo",
                    Kind:  &wit.TypeDef{...},
                    Owner: &wit.Interface{...},
                    Docs:  wit.Docs{
                      Contents: "",
                    },
                  },
                },
                Functions: map[string]*wit.Function{
                  "a": &wit.Function{
                    Name:    "a",
                    Kind:    &wit.Freestanding{...},
                    Params:  []wit.Param(nil),
                    Results: []wit.Param{
                      wit.Param{
                        Name: "",
                        Type: &wit.TypeDef{...},
                      },
                    },
                    Docs: wit.Docs{
                      Contents: "",
                    },
                  },
                },
                Package: &wit.Package{...},
                Docs:    wit.Docs{
                  Contents: "",
                },
              },
              "shared-items": &wit.Interface{...},
            },
            Worlds: map[string]*wit.World{
              "the-world": &wit.World{...},
            },
            Docs: wit.Docs{
              Contents: "",
            },
          },
          Docs: wit.Docs{
            Contents: "",
          },
        },
        "interface-1": &wit.Interface{...},
        "interface-2": &wit.Interface{...},
      },
      Exports: map[string]wit.WorldItem{},
      Package: (*wit.Package)(nil),
      Docs:    wit.Docs{
        Contents: "",
      },
    },
  },
  Interfaces: []*wit.Interface{
    &wit.Interface{...},
    &wit.Interface{...},
    &wit.Interface{...},
  },
  TypeDefs: []*wit.TypeDef{
    &wit.TypeDef{...},
    &wit.TypeDef{...},
    &wit.TypeDef{...},
  },
  Packages: []*wit.Package{
    &wit.Package{...},
  },
}