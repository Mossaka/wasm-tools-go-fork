// Generated by hand. PLEASE EDIT.

package monotonicclock

import "internal/wasm/wasi/io/poll"

// Interface represents the interface "wasi:clocks/wall-clock".
type Interface interface {
	Now() Instant
	Resolution() Duration
	SubscribeInstant(when Instant) poll.Pollable
	SubscribeDuration(when Duration) poll.Pollable
}

// Instant represents the type "wasi:clocks/monotonic-clock.instant".
//
// An instant in time, in nanoseconds. An instant is relative to an
// unspecified initial value, and can only be compared to instances from
// the same monotonic-clock.
type Instant uint64

// Duration represents the type "wasi:clocks/monotonic-clock.duration".
//
// A duration of time, in nanoseconds.
type Duration uint64

// Now represents the imported function "wasi:clocks/monotonic-clock#now".
//
// Read the current value of the clock.
//
// The clock is monotonic, therefore calling this function repeatedly will
// produce a sequence of non-decreasing values.
//
//go:wasmimport wasi:clocks/monotonic-clock@0.2.0-rc-2023-11-10 now
func Now() Instant

// SubscribeInstant represents the imported function "wasi:clocks/monotonic-clock#subscribe-instant".
//
//go:wasmimport wasi:clocks/monotonic-clock@0.2.0-rc-2023-11-10 subscribe-instant
func SubscribeInstant(when Instant) poll.Pollable

// SubscribeDuration represents the imported function "wasi:clocks/monotonic-clock#subscribe-duration".
//
// Create a `pollable` which will resolve once the given duration has
// elapsed, starting at the time at which this function was called.
// occured.
//
//go:wasmimport wasi:clocks/monotonic-clock@0.2.0-rc-2023-11-10 subscribe-duration
func SubscribeDuration(when Duration) poll.Pollable

/*
interface monotonic-clock {
    use wasi:io/poll@0.2.0-rc-2023-11-10.{pollable};

    /// An instant in time, in nanoseconds. An instant is relative to an
    /// unspecified initial value, and can only be compared to instances from
    /// the same monotonic-clock.
    type instant = u64;

    /// A duration of time, in nanoseconds.
    type duration = u64;

    /// Read the current value of the clock.
    ///
    /// The clock is monotonic, therefore calling this function repeatedly will
    /// produce a sequence of non-decreasing values.
    now: func() -> instant;

    /// Query the resolution of the clock. Returns the duration of time
    /// corresponding to a clock tick.
    resolution: func() -> duration;

    /// Create a `pollable` which will resolve once the specified instant
    /// occured.
    subscribe-instant: func(
        when: instant,
    ) -> pollable;

    /// Create a `pollable` which will resolve once the given duration has
    /// elapsed, starting at the time at which this function was called.
    /// occured.
    subscribe-duration: func(
        when: duration,
    ) -> pollable;
}

*/
