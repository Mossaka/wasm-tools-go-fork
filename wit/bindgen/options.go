package bindgen

// Option represents a single configuration option for this package.
type Option interface {
	applyOption(*options) error
}

type optionFunc func(*options) error

func (f optionFunc) applyOption(opts *options) error {
	return f(opts)
}

type options struct {
	// generatedBy is the name of the program that generates code with this package.
	generatedBy string

	// packageRoot is the root Go package or module path used in generated code.
	packageRoot string

	// cmPackage is the package path to the "cm" or Component Model package with basic types.
	// Default: github.com/ydnar/wasm-tools-go/cm.
	cmPackage string

	// versioned determines if Go packages are generated with version numbers.
	versioned bool

	// exports determines if export bindings are generated.
	exports bool
}

func (opts *options) apply(o ...Option) error {
	for _, o := range o {
		err := o.applyOption(opts)
		if err != nil {
			return err
		}
	}
	return nil
}

// GeneratedBy returns an [Option] that specifies the name of the program or package
// that will appear in the "Code generated by ..." header on generated files.
func GeneratedBy(name string) Option {
	return optionFunc(func(opts *options) error {
		opts.generatedBy = name
		return nil
	})
}

// PackageRoot returns an [Option] that specifies the root Go package path for generated Go packages.
func PackageRoot(path string) Option {
	return optionFunc(func(opts *options) error {
		opts.packageRoot = path
		return nil
	})
}

// CMPackage returns an [Option] that specifies the package path to the
// Component Model utility package (default: github.com/ydnar/wasm-tools-go/cm).
func CMPackage(path string) Option {
	return optionFunc(func(opts *options) error {
		opts.cmPackage = path
		return nil
	})
}

// Versioned returns an [Option] that specifies that all generated Go packages
// will have versions that match WIT versions.
func Versioned(versioned bool) Option {
	return optionFunc(func(opts *options) error {
		opts.versioned = versioned
		return nil
	})
}

// GenerateExports returns an [Option] that specifies whether to generate export bindings.
func GenerateExports(exports bool) Option {
	return optionFunc(func(opts *options) error {
		opts.exports = exports
		return nil
	})
}
